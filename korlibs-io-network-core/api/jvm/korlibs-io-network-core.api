public abstract interface class korlibs/io/http/core/HttpFetch {
	public static final field Companion Lkorlibs/io/http/core/HttpFetch$Companion;
	public abstract fun fetch (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;ZLjava/util/List;Lkorlibs/io/stream/AsyncInputStream;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/http/core/HttpFetch$Companion : korlibs/io/http/core/HttpFetch {
	public fun fetch (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;ZLjava/util/List;Lkorlibs/io/stream/AsyncInputStream;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/http/core/HttpFetch$DefaultImpls {
	public static synthetic fun fetch$default (Lkorlibs/io/http/core/HttpFetch;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;ZLjava/util/List;Lkorlibs/io/stream/AsyncInputStream;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class korlibs/io/http/core/HttpFetchResult {
	public fun <init> (ILjava/lang/String;Ljava/util/List;Lkorlibs/io/stream/AsyncInputStream;)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/util/List;
	public final fun component4 ()Lkorlibs/io/stream/AsyncInputStream;
	public final fun copy (ILjava/lang/String;Ljava/util/List;Lkorlibs/io/stream/AsyncInputStream;)Lkorlibs/io/http/core/HttpFetchResult;
	public static synthetic fun copy$default (Lkorlibs/io/http/core/HttpFetchResult;ILjava/lang/String;Ljava/util/List;Lkorlibs/io/stream/AsyncInputStream;ILjava/lang/Object;)Lkorlibs/io/http/core/HttpFetchResult;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBodyRaw ()Lkorlibs/io/stream/AsyncInputStream;
	public final fun getHeaders ()Ljava/util/List;
	public final fun getStatus ()I
	public final fun getStatusText ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class korlibs/io/socket/AsyncClientSSLProcessor : korlibs/io/socket/AsyncSocket {
	public fun <init> (Lkorlibs/io/socket/AsyncSocket;Lkorlibs/io/socket/SSLProcessor;)V
	public synthetic fun <init> (Lkorlibs/io/socket/AsyncSocket;Lkorlibs/io/socket/SSLProcessor;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun connect (Ljava/lang/String;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getAddress ()Lkorlibs/io/socket/AsyncSocketAddress;
	public final fun getClient ()Lkorlibs/io/socket/AsyncSocket;
	public fun getConnected ()Z
	public final fun getProcessor ()Lkorlibs/io/socket/SSLProcessor;
	public fun read (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun read ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun write (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun write ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class korlibs/io/socket/AsyncServerSocket : korlibs/io/async/AsyncCloseable {
	public static final field Companion Lkorlibs/io/socket/AsyncServerSocket$Companion;
	public abstract fun accept (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getBacklog ()I
	public abstract fun getHost ()Ljava/lang/String;
	public abstract fun getPort ()I
	public abstract fun getRequestPort ()I
	public abstract fun listen (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun listenFlow (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/socket/AsyncServerSocket$Companion {
	public final fun getANY_PORT ()I
}

public final class korlibs/io/socket/AsyncServerSocket$DefaultImpls {
	public static fun close (Lkorlibs/io/socket/AsyncServerSocket;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun listen (Lkorlibs/io/socket/AsyncServerSocket;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun listenFlow (Lkorlibs/io/socket/AsyncServerSocket;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class korlibs/io/socket/AsyncSocket : korlibs/io/stream/AsyncInputStream, korlibs/io/stream/AsyncOutputStream {
	public static final field Companion Lkorlibs/io/socket/AsyncSocket$Companion;
	public abstract fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun connect (Ljava/lang/String;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAddress ()Lkorlibs/io/socket/AsyncSocketAddress;
	public abstract fun getConnected ()Z
	public abstract fun read ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun write ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/socket/AsyncSocket$Companion {
}

public final class korlibs/io/socket/AsyncSocket$DefaultImpls {
	public static fun getAddress (Lkorlibs/io/socket/AsyncSocket;)Lkorlibs/io/socket/AsyncSocketAddress;
	public static fun read (Lkorlibs/io/socket/AsyncSocket;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun write (Lkorlibs/io/socket/AsyncSocket;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/socket/AsyncSocket$Stats {
	public static final field INSTANCE Lkorlibs/io/socket/AsyncSocket$Stats;
	public final fun getWriteCountEnd ()Lkotlinx/atomicfu/AtomicLong;
	public final fun getWriteCountError ()Lkotlinx/atomicfu/AtomicLong;
	public final fun getWriteCountStart ()Lkotlinx/atomicfu/AtomicLong;
	public fun toString ()Ljava/lang/String;
}

public final class korlibs/io/socket/AsyncSocketAddress {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;I)V
	public synthetic fun <init> (Ljava/lang/String;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun copy (Ljava/lang/String;I)Lkorlibs/io/socket/AsyncSocketAddress;
	public static synthetic fun copy$default (Lkorlibs/io/socket/AsyncSocketAddress;Ljava/lang/String;IILjava/lang/Object;)Lkorlibs/io/socket/AsyncSocketAddress;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAddress ()Ljava/lang/String;
	public final fun getPort ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class korlibs/io/socket/AsyncSocket_jvmAndAndroidKt {
	public static final fun invoke (Lkorlibs/io/socket/AsyncServerSocket$Companion;ILjava/lang/String;IZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun invoke (Lkorlibs/io/socket/AsyncSocket$Companion;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun invoke$default (Lkorlibs/io/socket/AsyncServerSocket$Companion;ILjava/lang/String;IZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun invoke$default (Lkorlibs/io/socket/AsyncSocket$Companion;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static final fun unix (Lkorlibs/io/socket/AsyncServerSocket$Companion;Ljava/lang/String;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun unix (Lkorlibs/io/socket/AsyncSocket$Companion;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun unix$default (Lkorlibs/io/socket/AsyncServerSocket$Companion;Ljava/lang/String;ILkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class korlibs/io/socket/JvmAsyncServerSocket : korlibs/io/socket/AsyncServerSocket {
	public fun <init> (ILjava/lang/String;IZ)V
	public synthetic fun <init> (ILjava/lang/String;IZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun accept (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getBacklog ()I
	public fun getHost ()Ljava/lang/String;
	public fun getPort ()I
	public fun getRequestPort ()I
	public final fun getSecure ()Z
	public final fun getSsc ()Ljava/net/ServerSocket;
	public final fun init (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun listen (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun listenFlow (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/socket/JvmAsyncSocket : korlibs/io/socket/AsyncSocket {
	public fun <init> (Ljava/net/Socket;Z)V
	public synthetic fun <init> (Ljava/net/Socket;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/nio/channels/SocketChannel;Z)V
	public synthetic fun <init> (Ljava/nio/channels/SocketChannel;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun connect (Ljava/lang/String;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getAddress ()Lkorlibs/io/socket/AsyncSocketAddress;
	public fun getConnected ()Z
	public final fun getSecure ()Z
	public fun read (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun read ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun write (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun write ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/socket/JvmAsyncSocketKt {
	public static final fun ServerSocketChannel_open (Ljava/net/ProtocolFamily;)Ljava/nio/channels/ServerSocketChannel;
	public static final fun SocketChannel_open (Ljava/net/ProtocolFamily;)Ljava/nio/channels/SocketChannel;
	public static final fun UnixDomainSocketAddress_of (Ljava/lang/String;)Ljava/net/SocketAddress;
	public static final fun getStandardProtocolFamily_UNIX ()Ljava/net/ProtocolFamily;
	public static final fun toAsyncAddress (Ljava/net/SocketAddress;)Lkorlibs/io/socket/AsyncSocketAddress;
}

public final class korlibs/io/socket/JvmNioAsyncClient : korlibs/io/socket/AsyncSocket {
	public fun <init> ()V
	public fun <init> (Ljava/nio/channels/AsynchronousSocketChannel;)V
	public synthetic fun <init> (Ljava/nio/channels/AsynchronousSocketChannel;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun connect (Ljava/lang/String;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getAddress ()Lkorlibs/io/socket/AsyncSocketAddress;
	public fun getConnected ()Z
	public fun read (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun read ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun write (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun write ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/socket/JvmNioAsyncServer : korlibs/io/socket/AsyncServerSocket {
	public fun <init> (ILjava/lang/String;I)V
	public synthetic fun <init> (ILjava/lang/String;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun accept (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getBacklog ()I
	public fun getHost ()Ljava/lang/String;
	public fun getPort ()I
	public fun getRequestPort ()I
	public final fun getSsc ()Ljava/nio/channels/AsynchronousServerSocketChannel;
	public final fun init (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun listen (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun listenFlow (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class korlibs/io/socket/PairAsyncSocket : korlibs/io/socket/AsyncSocket {
	public fun <init> ()V
	public fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun connect (Ljava/lang/String;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getAddress ()Lkorlibs/io/socket/AsyncSocketAddress;
	public fun getConnected ()Z
	public final fun getReadDeque ()Lkorlibs/io/stream/SyncStream;
	public final fun getWriteDeque ()Lkorlibs/io/stream/SyncStream;
	public fun read (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun read ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun write (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun write ([BIILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class korlibs/io/socket/SSLProcessor {
	public abstract fun addDecryptedClientData ([BII)V
	public abstract fun addEncryptedServerData ([BII)V
	public abstract fun clientClose ()V
	public abstract fun getDecryptedServerData ([BII)I
	public abstract fun getEncryptedClientData ([BII)I
	public abstract fun getNeedInput ()Z
	public abstract fun getNeedSync ()Z
	public abstract fun getStatus ()Ljava/lang/Object;
	public abstract fun isAlive ()Z
	public abstract fun setEndPoint (Ljava/lang/String;I)V
}

public final class korlibs/io/socket/SSLProcessor$DefaultImpls {
	public static synthetic fun getDecryptedServerData$default (Lkorlibs/io/socket/SSLProcessor;[BIIILjava/lang/Object;)I
	public static synthetic fun getEncryptedClientData$default (Lkorlibs/io/socket/SSLProcessor;[BIIILjava/lang/Object;)I
}

public final class korlibs/io/socket/SSLProcessorJvm : korlibs/io/socket/SSLProcessor {
	public fun <init> ()V
	public fun addDecryptedClientData ([BII)V
	public fun addEncryptedServerData ([BII)V
	public fun clientClose ()V
	public fun getDecryptedServerData ([BII)I
	public fun getEncryptedClientData ([BII)I
	public final fun getEngine ()Ljavax/net/ssl/SSLEngine;
	public fun getNeedInput ()Z
	public fun getNeedSync ()Z
	public final fun getSslContext ()Ljavax/net/ssl/SSLContext;
	public fun getStatus ()Ljava/lang/Object;
	public fun isAlive ()Z
	public fun setAlive (Z)V
	public fun setEndPoint (Ljava/lang/String;I)V
	public final fun setEngine (Ljavax/net/ssl/SSLEngine;)V
}

public final class korlibs/io/socket/SSLProcessorKt {
	public static final fun getAllDecryptedServerData (Lkorlibs/io/socket/SSLProcessor;)Ljava/util/List;
	public static final fun getAllEncryptedClientData (Lkorlibs/io/socket/SSLProcessor;)Ljava/util/List;
	public static final fun getDecryptedServerData (Lkorlibs/io/socket/SSLProcessor;)[B
	public static final fun getEncryptedClientData (Lkorlibs/io/socket/SSLProcessor;)[B
}

public final class korlibs/io/socket/SSLProcessor_jvmAndAndroidKt {
	public static final fun DefaultSSLProcessor ()Lkorlibs/io/socket/SSLProcessor;
}

public final class korlibs/io/socket/UnixServerSocket : korlibs/io/socket/AsyncServerSocket {
	public field ssc Ljava/nio/channels/ServerSocketChannel;
	public fun <init> (Ljava/lang/String;IZ)V
	public synthetic fun <init> (Ljava/lang/String;IZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun accept (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun close (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getBacklog ()I
	public fun getHost ()Ljava/lang/String;
	public final fun getPath ()Ljava/lang/String;
	public fun getPort ()I
	public fun getRequestPort ()I
	public final fun getSecure ()Z
	public final fun getSsc ()Ljava/nio/channels/ServerSocketChannel;
	public final fun init (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun listen (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun listenFlow (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun setSsc (Ljava/nio/channels/ServerSocketChannel;)V
}

